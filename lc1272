class Solution {
public:
    vector<vector<int>> removeInterval(vector<vector<int>>& intervals, vector<int>& toBeRemoved) {
        sort(intervals.begin(), intervals.end(), [](vector<int>&a, vector<int>&b){return a[0] < b[0];});
        vector<vector<int>> res;
        for(int i = 0;i < intervals.size() ;i++) {
            if(toBeRemoved[0] > intervals[i][1] || toBeRemoved[1] < intervals[i][0]) {
                res.push_back(intervals[i]);
            } else {
                vector<vector<int>> temp = helper(intervals[i], toBeRemoved);
                if(temp.empty()) {
                    continue;
                }
                for(auto a:temp) {
                    res.push_back(a);
                }
            }

        }
        return res;;
    }
    
    vector<vector<int>> helper(const vector<int>&interval, const vector<int>& toRemove) {
        if(interval[0] >= toRemove[0] && interval[1] <= toRemove[1])
            return {};
        if(interval[0] < toRemove[0] && interval[1] > toRemove[1]) {
            return {{interval[0], toRemove[0]}, {toRemove[1], interval[1]}};
        }
        if(interval[0] >=toRemove[0]) {
            return {{toRemove[1], interval[1]}};
        }
        return {{interval[0], toRemove[0]}};
    }
};