class TrieNode {
public:
    bool isWord;
    TrieNode* children[26];

    TrieNode() {
       for(int i=0;i < 26;i++) {
           children[i] = NULL;
           isWord = false;
       } 
    }
};
class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        int size = word.size();
        TrieNode* cur = root;
        for(int i = 0; i < size;i++) {
            int k = word[i] - 'a';
            if(cur->children[k] == NULL) {
                cur->children[k] = new TrieNode();
            }
            cur = cur->children[k];
        }
        cur->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        int size = word.size();
        TrieNode* cur = root;
        for(int i = 0;i < size;i++) {
            int k = word[i] - 'a';
            if(cur->children[k] == NULL)
                return false;
            cur = cur->children[k];
        }
        return cur->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        int size = prefix.size();
        TrieNode* cur = root;
        for(int i = 0;i < size;i++) {
            int k = prefix[i] - 'a';
            if(cur->children[k] == NULL)
                return false;
            cur = cur->children[k];
        }
        return true;
    }
private:
    TrieNode*root;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */