class Solution {
public:
    int maximizeSweetness(vector<int>& sweetness, int K) {
        int left = 0, right = accumulate(sweetness.begin(), sweetness.end(), 0);
        while(left + 1 < right) {
            int mid = left + (right - left) / 2;
            if(isValidK(sweetness, mid, K + 1)) {
                left = mid;
            } else {
                right = mid;
            }
        }
        return isValidK(sweetness, right, K+1) ? right:left;
    }
    bool isValidK(const vector<int>sweetness, const int curSweet, const int K) {
        int piece = 0, totalSeet = 0;
        for(auto s:sweetness) {
            totalSeet+=s;
            if(totalSeet >= curSweet) {
                piece++;
                totalSeet = 0;
            }
        }
        return piece >= K;
    }
};