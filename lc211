class TrieNode {
public:
    bool isWord;
    TrieNode* child[26];
    TrieNode() {
        isWord = false;
        for(int i = 0;i < 26;i++) {
            child[i] = NULL;
        }
    }
};

class WordDictionary {
public:
    /** Initialize your data structure here. */
    WordDictionary() {
         root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        TrieNode* cur = root;
        for(int i = 0 ; i < word.size();i++) {
            int k = word[i] - 'a';
            if(cur->child[k] == NULL) {
                cur->child[k] = new TrieNode();
            }
            cur = cur->child[k];
        }
        cur->isWord = true;
        return;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
bool search(string word) {        
        return helper(word.c_str(), root);
    }
    bool helper(const char *ch, TrieNode* cur){
        if(!cur)
            return false;
        if (*ch == '\0') return cur->isWord;
        if(*ch != '.') {
            return helper(ch + 1, cur->child[*ch - 'a']);    
        } else {
            for(int i = 0; i < 26;i++) {
                if(helper(ch + 1, cur->child[i]))
                    return true;
            }
            return false;
        }
    }
private:
    TrieNode* root;
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */