/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, vector<TreeNode*> &nodes) {
        if(nodes.size() <=1) {
            return nodes.empty() ? NULL : nodes[0];
        }
        tempA = nodes[0];
        for(int i = 1;i < nodes.size();i++) {
            tempA = helper(root, nodes[i],tempA);
        }
        return tempA;
    }
    
    TreeNode* helper(TreeNode* root, TreeNode*p, TreeNode*q) {
        if(!root) {
            return NULL;
        }
        
        if(root == p || root == q)
            return root;
        
        TreeNode* left = helper(root->left, p ,q);
        TreeNode* right = helper(root->right, p,q);
        
        if(left && right) {
            return root;
        }
        if(left) {
            return left;
        }
        if(right) {
            return right;
        }
        return NULL;
    }
private:
            TreeNode* tempA;
};